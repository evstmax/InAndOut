
@model InAndOut.Models.Expense

<form method="post" asp-action="UpdatePost">
     <input method="post" asp-for="Id" hidden/> 
    <div class="border p-3">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group row">
            <h2 class="text-black-50 pl-3"> Update Expense</h2>
        </div>
        <div class="row">
            <div class="col-12">

                <div class="form-group row">
                    <div class="col-6">
                        <label asp-for="ExpenseName"></label>
                        <span asp-validation-for="ExpenseName" class="text-danger"></span>
                    </div>
                    <div class="col-6">
                        <label asp-for="ExpenseValue"></label>
                        <span asp-validation-for="ExpenseValue" class="text-danger"></span>

                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-6">
                        <input asp-for="ExpenseName" class="form-control"/>
                    </div>
                    <div class="col-6">
                        <input asp-for="ExpenseValue" class="form-control"/>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-8 offset-2 row">
                        <div class="col">
                            <input type="submit" class="btn btn-info w-75" value="Update"/>
                        </div>
                        <div class="col">
                            <a asp-action="Index" class="btn btn-danger w-75"> Back</a>
                        </div>
                    </div>
                </div>

            </div>
        </div>


    </div>
</form>


@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial" />
        <script>
            // переопределение валидации на стороне клиента
            $.validator.methods.range = function (value, element, param) {
                var globalizedValue = value.replace(",", ".");
                return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
            }
 
            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }
        </script>
    }
}